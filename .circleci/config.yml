version: 2.1

parameters:
  workflow:
    type: enum
    default: auto
    description: The workflow to trigger.
    enum: [auto, base, php-all, php-fpm, php-apache2, wp-php-fpm, wp-php-apache2, wp-all, all]

executors:
  docker:
    docker:
      - image: cimg/base:stable

jobs:
  hadolint:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Checking wordpress.Dockerfile code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/dockerfile/wordpress.Dockerfile || true
      - run:
          name: Checking wordpress-php-apache2.Dockerfile code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/dockerfile/wordpress-php-apache2.Dockerfile || true
      - run:
          name: Checking wordpress-php-fpm.Dockerfile code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/dockerfile/wordpress-php-fpm.Dockerfile || true
  build-base:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to docker hub
          command: echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
      - run:
          name: Setup apko
          command: |
            wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
            /usr/local/go/bin/go install chainguard.dev/apko@latest
            rm -rf go1.21.6.linux-amd64.tar.gz
      - run:
          name: Build and push sipstack base image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/base.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/sipstack:base
  build-php-fpm:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to docker hub
          command: echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
      - run:
          name: Setup apko
          command: |
            wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
            /usr/local/go/bin/go install chainguard.dev/apko@latest
            rm -rf go1.21.6.linux-amd64.tar.gz
      # - run:
      #     name: Build and push php81-fpm image
      #     command: |
      #       /home/circleci/go/bin/apko publish \
      #         --sbom=false build/apko/php81/php-fpm.yaml \
      #         ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.1-fpm
      - run:
          name: Build and push php82-fpm image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php82/php-fpm.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.2-fpm
      - run:
          name: Build and push php83-fpm image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php83/php-fpm.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.3-fpm
      - run:
          name: Build and push php-fpm image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php83/php-fpm.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:fpm
  build-php-apache2:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to docker hub
          command: echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
      - run:
          name: Setup apko
          command: |
            wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
            /usr/local/go/bin/go install chainguard.dev/apko@latest
            rm -rf go1.21.6.linux-amd64.tar.gz
      # - run:
      #     name: Build and push php81-apache2 image
      #     command: |
      #       /home/circleci/go/bin/apko publish \
      #         --sbom=false build/apko/php81/php-apache2.yaml \
      #         ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.1-apache2
      - run:
          name: Build and push php82-apache2 image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php82/php-apache2.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.2-apache2
      - run:
          name: Build and push php83-apache2 image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php83/php-apache2.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.3-apache2
      - run:
          name: Build and push php-apache2 image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php83/php-apache2.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:apache2
  build-php-all:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to docker hub
          command: echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
      - run:
          name: Setup apko
          command: |
            wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
            /usr/local/go/bin/go install chainguard.dev/apko@latest
            rm -rf go1.21.6.linux-amd64.tar.gz
      # - run:
      #     name: Build and push php:8.1 image
      #     command: |
      #       /home/circleci/go/bin/apko publish \
      #         --sbom=false build/apko/php81/php-full.yaml \
      #         ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.1
      - run:
          name: Build and push php:8.2 image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php82/php-full.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.2
      - run:
          name: Build and push php:8.3 image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php83/php-full.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:8.3
      - run:
          name: Build and push php:latest image
          command: |
            /home/circleci/go/bin/apko publish \
              --sbom=false build/apko/php83/php-full.yaml \
              ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:latest
  build-wordpress-php-fpm:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to docker hub
          command: echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
      - run:
          name: Build and push wordpress-php81-fpm images
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker context create buildx-build
            docker buildx create --use buildx-build
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.1-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php81-fpm \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php81-fpm \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-fpm.Dockerfile .
      - run:
          name: Build and push wordpress-php82-fpm images
          command: |
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.2-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php82-fpm \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php82-fpm \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-fpm.Dockerfile .
      - run:
          name: Build and push wordpress-php83-fpm images
          command: |
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.3-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php83-fpm \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php83-fpm \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-fpm.Dockerfile .
      - run:
          name: Build and push wordpress-php-fpm images
          command: |
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.3-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php-fpm \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php-fpm \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-fpm.Dockerfile .
  build-wordpress-php-apache2:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to docker hub
          command: echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
      - run:
          name: Build and push wordpress-php81-apache2 images
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker context create buildx-build
            docker buildx create --use buildx-build
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.1-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php81-apache2 \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php81-apache2 \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-apache2.Dockerfile .
      - run:
          name: Build and push wordpress-php82-apache2 images
          command: |
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.2-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php82-apache2 \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php82-apache2 \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-apache2.Dockerfile .
      - run:
          name: Build and push wordpress-php83-apache2 latest images
          command: |
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.3-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php83-apache2 \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php83-apache2 \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-apache2.Dockerfile .
      - run:
          name: Build and push wordpress-php-apache2 latest images
          command: |
            docker buildx build --push \
              --build-arg REGISTRY_USER=${REGISTRY_USER} \
              --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY}/ \
              --build-arg PHP_VERSION="8.3-" \
              --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION}-php-apache2 \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:${IMAGE_VERSION} \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php-apache2 \
              --tag ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:latest \
              --platform linux/amd64,linux/arm64 -f build/dockerfile/wordpress-php-apache2.Dockerfile .
  grype-scan-all:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup grype
          command: |
            wget https://github.com/anchore/grype/releases/download/v0.74.0/grype_0.74.0_linux_amd64.deb
            sudo dpkg -i grype_0.74.0_linux_amd64.deb
      - run:
          name: Scanning sipstack base image
          command: grype ${DOCKER_REGISTRY}/${REGISTRY_USER}/sipstack:base
      - run:
          name: Scanning php-latest image
          command: grype ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:latest
      - run:
          name: Scanning php-fpm image
          command: grype ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:fpm
      - run:
          name: Scanning php-apache2 image
          command: grype ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:apache2
      - run:
          name: Scanning wordpress-php-fpm image
          command: grype ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php-fpm
      - run:
          name: Scanning wordpress-php-apache2 image
          command: grype ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php-apache2
  trivy-scan-all:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup trivy
          command: |
            wget https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Linux-64bit.deb
            sudo dpkg -i trivy_0.48.3_Linux-64bit.deb
      - run:
          name: Scanning sipstack base image
          command: trivy image ${DOCKER_REGISTRY}/${REGISTRY_USER}/sipstack:base
      - run:
          name: Scanning php-latest image
          command: trivy image ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:latest
      - run:
          name: Scanning php-fpm image
          command: trivy image ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:fpm
      - run:
          name: Scanning php-apache2 image
          command: trivy image ${DOCKER_REGISTRY}/${REGISTRY_USER}/php:apache2
      - run:
          name: Scanning wordpress-php-fpm image
          command: trivy image ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php-fpm
      - run:
          name: Scanning wordpress-php-apache2 image
          command: trivy image ${DOCKER_REGISTRY}/${REGISTRY_USER}/wordpress:php-apache2

workflows:
  version: 2
  build-image-auto:
    when: { equal: [ auto, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - grype-scan-all
      - trivy-scan-all
  build-image-all:
    when: { equal: [ all, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-base:
          requires:
            - hadolint
      - build-php-all:
          requires:
            - hadolint
      - build-php-fpm:
          requires:
            - hadolint
      - build-php-apache2:
          requires:
            - hadolint
      - build-wordpress-php-fpm:
          requires:
            - build-base
            - build-php-fpm
      - build-wordpress-php-apache2:
          requires:
            - build-base
            - build-php-apache2
      - grype-scan-all:
          requires:
            - build-wordpress-php-fpm
            - build-wordpress-php-apache2
      - trivy-scan-all:
          requires:
            - build-wordpress-php-fpm
            - build-wordpress-php-apache2
  build-image-base:
    when: { equal: [ base, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-base:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-base
      - trivy-scan-all:
          requires:
            - build-base
  build-image-php-all:
    when: { equal: [ php-all, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-php-all:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-php-all
      - trivy-scan-all:
          requires:
            - build-php-all
  build-image-php-fpm:
    when: { equal: [ php-fpm, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-php-fpm:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-php-fpm
      - trivy-scan-all:
          requires:
            - build-php-fpm
  build-image-php-apache2:
    when: { equal: [ php-apache2, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-php-apache2:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-php-apache2
      - trivy-scan-all:
          requires:
            - build-php-apache2
  build-image-wordpress-php-fpm:
    when: { equal: [ wp-php-fpm, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-wordpress-php-fpm:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-wordpress-php-fpm
      - trivy-scan-all:
          requires:
            - build-wordpress-php-fpm
  build-image-wordpress-php-apache2:
    when: { equal: [ wp-php-apache2, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-wordpress-php-apache2:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-wordpress-php-apache2
      - trivy-scan-all:
          requires:
            - build-wordpress-php-apache2
  build-image-wordpress-all:
    when: { equal: [ wp-all, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-wordpress-php-fpm:
          requires:
            - hadolint
      - build-wordpress-php-apache2:
          requires:
            - hadolint
      - grype-scan-all:
          requires:
            - build-wordpress-php-fpm
            - build-wordpress-php-apache2
      - trivy-scan-all:
          requires:
            - build-wordpress-php-fpm
            - build-wordpress-php-apache2
